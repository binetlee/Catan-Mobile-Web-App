var numTiles;
var tileCoordArray;
var tileNumbers = [];
var tileTypes = [];
var newCoords;
var numDeserts;
var desCoord;
var mapCanvas;
var drawingContext;
var canvasCenterX;
var canvasCenterY;


var mapStyle = "retro";

var size = null;
var defaultFillStyle = "#ffffff";
var strokeStyle = "#000000";
var lineWidth = 3;

var resourceTypeToImageCanvas = {
	"ore": null,
	"clay": null,
	"wool": null,
	"wood": null,
	"grain": null,
	"desert": null
};


var dx = size * (1 + Math.cos(Math.PI/3)) / 2;
var dy = size * Math.sin(Math.PI/3);


var catanMap = new catanBase();
var copyMap = new catanBase();
var memoryMap = new catanBase();
var normalMap = new MapDefinition();

normalMap.resourceDict = {//Dictionary for all the resources
    "desert": 1,
    "wood": 4,
    "clay": 3,
    "wool": 4,
    "grain": 4,
    "ore": 3
};

normalMap.numberDict = { // Dictionary for all the different number values
    2: 1,
    3: 2,
    4: 2,
    5: 2,
    6: 2,
    8: 2,
    9: 2,
    10: 2,
    11: 2,
    12: 1
};

normalMap.coordinatesArray = [//Coordinate mapping system
	[-4,2],[-4,0],[-4,-2],[4,2],[4,0],[4,-2],[2,3],[2,1],[2,-1],[2,-3],[-2,3],[-2,1],[-2,-1],[-2,-3],[0,4],[0,2],[0,0],[0,-2],[0,-4]
];


window.onresize = function(event) {//Resize in case map has to go smaller
	sizeCanvas();
	catanMap.resize();
	catanMap.draw();
}

function init() {

	loadImages(function() {})
	addCanvas();

}

function preloadImages(arr, callback){
//http://www.javascriptkit.com/javatutors/preloadimagesplus.shtml

    var newimages=[], loadedimages=0;
    var postaction=function(){};
    var arr=(typeof arr!="object")? [arr] : arr;
    function imageloadpost(){
        loadedimages++;
        if (loadedimages==arr.length){
            callback(newimages); //call postaction and pass in newimages array as parameter
        }
    }
    for (var i=0; i<arr.length; i++){
        newimages[i]=new Image();
        newimages[i].src=arr[i];
        newimages[i].onload=function(){
            imageloadpost();
        }
        newimages[i].onerror=function(){
            imageloadpost();
        }
    }

}

function loadImages(callback) {

	var rTypes = [];
	var imgPaths = [];
	for (var key in resourceTypeToImageCanvas) {
		rTypes.push(key);
		imgPaths.push("images/"+key+".png");
	}

	preloadImages(imgPaths, function(images) {

		for (var i = 0; i < imgPaths.length; i += 1) {
			//resourceTypeToImage[ rTypes[i] ] = images[i];
			var img = images[i];
			var imgCanvas = document.createElement("canvas");
			var imgContext = imgCanvas.getContext("2d");

			imgCanvas.width = img.width;
			imgCanvas.height = img.height;
			imgContext.drawImage(img, 0, 0);

			resourceTypeToImageCanvas[ rTypes[i] ] = imgCanvas;
		}

		callback();

	});

}

//Main functions used

function createMap() {//Map Creation

	var mapDef = normalMap;
	catanMap.defineMap(mapDef);
	catanMap.shuffleposs();
	catanMap.resize();
	catanMap.draw();
}

function makeCopy(){//Copier
    copyMap.hexTiles = catanMap.hexTiles;
    copyMap.coordToTile = catanMap.coordToTile;
    copyMap.hexTiles = catanMap.hexTiles;
    copyMap.desCoord = catanMap.desCoord;
}

function makeMemory(){//Memorize, demonstrates how you could expand the concepts by making the copy
    memoryMap.hexTiles = catanMap.hexTiles;
    memoryMap.coordToTile = catanMap.coordToTile;
    memoryMap.hexTiles = catanMap.hexTiles;
    memoryMap.desCoord = catanMap.desCoord;
}


function shuffleBasic(){//Shuffling
    makeCopy();
    var mapDef = normalMap;
    catanMap.defineMap(mapDef);
    catanMap.shuffleonly();
    catanMap.resize();
    catanMap.draw();
}

function displayMemory(){//Display Copy
    catanMap.hexTiles = memoryMap.hexTiles;
    catanMap.coordToTile = memoryMap.coordToTile;
    catanMap.hexTiles = memoryMap.hexTiles;
    catanMap.desCoord = memoryMap.desCoord;
    catanMap.resize();
    catanMap.draw();
}



catanBase.prototype.shuffleposs = function() {

    var pass;
        do {
            this.hexTiles = [];
            pass = true;

            numTiles = this.mapDefinition.coordinatesArray.length;

            tileCoordArray = this.mapDefinition.coordinatesArray.copy();

            tileNumbers = [];
            for (var key in this.mapDefinition.numberDict) {
                for (var i = 0; i < this.mapDefinition.numberDict[key]; i += 1) {
                    tileNumbers.push(parseInt(key));
                }
            }

            tileTypes = [];
            for (var key in this.mapDefinition.resourceDict) {
                if (key != "desert") {
                    for (var i = 0; i < this.mapDefinition.resourceDict[key]; i += 1) {
                        tileTypes.push(key);
                    }
                }
            }

            newCoords = null;
            numDeserts = this.mapDefinition.resourceDict["desert"];

            //Desert
            for (var i = 0; i < numDeserts; i += 1) {
                var desertHexTile = new HexTile();
                desCoord = tileCoordArray.random(true);
                desertHexTile.setCoordinate.apply(
                    desertHexTile,
                    desCoord
                );
                desertHexTile.setResourceType("desert");
                this.desCoord = desCoord;
                this.hexTiles.push(desertHexTile);
                this.coordToTile[desCoord.toString()] = desertHexTile;
            }


            // Handle all other tiles
            for (var i = 0; i < (numTiles - numDeserts); i += 1) {

                var newHexagon = new HexTile();
                newHexagon.setResourceType(tileTypes.random(true));
                newCoords = tileCoordArray[i];
                newHexagon.setCoordinate.apply(
                    newHexagon,
                    newCoords
                );

                var invalid = true;
                var tmpNums = [];

                do {
                    invalid = false;
                    newNum = tileNumbers.random(true);
                    newHexagon.setNumber(newNum);
                    if (newHexagon.isHighlyProductive()) {
                        invalid = this.hasHighlyProductiveNeighbors(newHexagon);
                        if (invalid) {
                            tmpNums.push(newNum);
                        }
                    }
                } while (invalid);
                tileNumbers = tileNumbers.concat(tmpNums);


                this.hexTiles.push(newHexagon);
                this.coordToTile[newCoords.toString()] = newHexagon;
            } // end for loop

            for (var i = 0; i < this.hexTiles.length; i += 1) {
                if((this.hexTiles[i].number == null || this.hexTiles[i].number == undefined) && this.hexTiles[i].resourceType != "desert"){
                    //alert(this.hexTiles[i].number);
                    pass = false;
                }
            }
        }while (pass == false);

}

//Shuffle Probability only
catanBase.prototype.shuffleonly = function() {

    var pass;
    do {
        this.hexTiles = [];
        pass = true;

        numTiles = this.mapDefinition.coordinatesArray.length;

        tileCoordArray = this.mapDefinition.coordinatesArray.copy();

        tileNumbers = [];
        for (var key in this.mapDefinition.numberDict) {
            for (var i = 0; i < this.mapDefinition.numberDict[key]; i += 1) {
                tileNumbers.push(parseInt(key));
            }
        }

        tileTypes = [];
        for (var key in this.mapDefinition.resourceDict) {
            if (key != "desert") {
                for (var i = 0; i < this.mapDefinition.resourceDict[key]; i += 1) {
                    tileTypes.push(key);
                }
            }
        }

        newCoords = null;
        numDeserts = this.mapDefinition.resourceDict["desert"];

        //Desert
        for (var i = 0; i < numDeserts; i += 1) {
            var desertHexTile = new HexTile();
            desCoord = copyMap.desCoord;
            desertHexTile.setCoordinate.apply(
                desertHexTile,
                desCoord
            );
            var index = tileCoordArray.indexOf(desCoord);
            tileCoordArray.splice(index,1);
            desertHexTile.setResourceType("desert");
            this.desCoord = desCoord;
            this.hexTiles.push(desertHexTile);
            this.coordToTile[desCoord.toString()] = desertHexTile;
        }


        // Handle all other tiles
        for (var i = 0; i < (numTiles - numDeserts); i += 1) {

            var newHexagon = new HexTile();
            newHexagon.setResourceType(copyMap.hexTiles[i+1].resourceType);
            newCoords = tileCoordArray[i];
            newHexagon.setCoordinate.apply(
                newHexagon,
                newCoords
            );

            var invalid = true;
            var tmpNums = [];

            do {
                invalid = false;
                newNum = tileNumbers.random(true);
                newHexagon.setNumber(newNum);
                if (newHexagon.isHighlyProductive()) {
                    invalid = this.hasHighlyProductiveNeighbors(newHexagon);
                    if (invalid) {
                        tmpNums.push(newNum);
                    }
                }
            } while (invalid);
            tileNumbers = tileNumbers.concat(tmpNums);


            this.hexTiles.push(newHexagon);
            this.coordToTile[newCoords.toString()] = newHexagon;
        } // end for loop

        for (var i = 0; i < this.hexTiles.length; i += 1) {
            if((this.hexTiles[i].number == null || this.hexTiles[i].number == undefined) && this.hexTiles[i].resourceType != "desert"){
                //alert(this.hexTiles[i].number);
                pass = false;
            }
        }
    }while (pass == false);

}


function MapDefinition() {
	this.resourceDict = null;
	this.numberDict = null;
	this.coordinatesArray = null;
}

MapDefinition.prototype.sumDictVals = function(dict) {
	var sum = 0;
	for (var key in dict) {
		sum += dict[key];
	}
	return sum;
}

function catanBase() {

	this.mapDefinition = null;
	this.hexTiles = null;
	this.coordToTile = {};
    this.desCoord = null;
	this.coordSpan = [0,0];

}


catanBase.prototype.defineMap = function(mapDefinition) {


		this.mapDefinition = mapDefinition;

		var coordRangeX = [0,0];
		var coordRangeY = [0,0];

		for (var i = 0; i < mapDefinition.coordinatesArray.length; i += 1) {
			var coord = mapDefinition.coordinatesArray[i];
			coordRangeX = [
				Math.min(coordRangeX[0], coord[0]),
				Math.max(coordRangeX[1], coord[0])
			];
			coordRangeY = [
				Math.min(coordRangeY[0], coord[1]),
				Math.max(coordRangeY[1], coord[1])
			];
		}

		this.coordSpan = [
			coordRangeX[1] - coordRangeX[0],
			coordRangeY[1] - coordRangeY[0]
		];

}


catanBase.prototype.draw = function() {

	if (this.hexTiles) {
		drawingContext.clear();
		for (var i = 0; i < this.hexTiles.length; i += 1) {
			this.hexTiles[i].draw();
		}
	}

}


catanBase.prototype.resize = function() {

	var width = (mapCanvas.width-10) /
		( (this.coordSpan[0] * (1 + Math.cos(Math.PI/3)) / 2) + 2 );
	var height = (mapCanvas.height-10) /
		( (this.coordSpan[1] + 2) * Math.sin(Math.PI/3) );
	size = Math.floor(Math.min(width, height));
	dx = size * (1 + Math.cos(Math.PI/3)) / 2;
	dy = size * Math.sin(Math.PI/3);
}

catanBase.prototype.getNearest = function(tile) {

	var tileX = tile.gridX;
	var tileY = tile.gridY;

	var adjTiles = [];

    //The shifting system, checks the nearest tiles
	xshift = [2, 2, 0, 0, -2, -2];
	yshift = [1, -1, 2, -2, 1, -1];

	for (var i = 0; i < 6; i += 1) {
		var adjTile = this.coordToTile[
			[tileX + xshift[i], tileY + yshift[i]].toString()
		];
		// Will be null if no hex tile found at that coordinate
		if (adjTile) {
			adjTiles.push(adjTile);
		}
	}

	return adjTiles;

}
catanBase.prototype.hasHighlyProductiveNeighbors = function(tile) {
	var adjacentTiles = this.getNearest(tile);
	for (var i = 0; i < adjacentTiles.length; i += 1) {
		if ( adjacentTiles[i].isHighlyProductive() ) {
			return true;
		}
	}
	return false;
}

function HexTile() {
	this.gridX;
	this.gridY;
	this.xCenter;
	this.yCenter;
	this.resourceType = "none";
	this.fillStyle = defaultFillStyle;
	this.number;
}
HexTile.prototype.strokeStyle = strokeStyle;
HexTile.prototype.lineWidth = lineWidth;
HexTile.prototype.hexColorMap = resourceTypeToImageCanvas;
HexTile.prototype.size = size;
HexTile.prototype.setResourceType = function(resourceType) {
		this.resourceType = resourceType;
		this.fillStyle = this.hexColorMap[resourceType];
}
HexTile.prototype.isHighlyProductive = function() {
	return ( (this.number == 6) || (this.number == 8) );
}
HexTile.prototype.setNumber = function(number) {
	this.number = number;
}
HexTile.prototype.setCoordinate = function(x,y) {
	this.gridX = x;
	this.gridY = y;
}
HexTile.prototype.draw = function() {
	this.xCenter = canvasCenterX + dx*this.gridX;
	this.yCenter = canvasCenterY + dy*this.gridY;
	
	this.drawBase();
	if (this.number) {
		this.drawNumber();
	}
}


HexTile.prototype.drawBase = function() {
	
	if (mapStyle == "retro") {
		drawingContext.lineWidth = 11;
		drawingContext.fillStyle = "rgba(255,255,255,0)";
		drawingContext.strokeStyle = "#C54392";
	} else {
		drawingContext.lineWidth = this.lineWidth;
		drawingContext.fillStyle = this.fillStyle;
		drawingContext.strokeStyle = this.strokeStyle;
	}
	
	var angleOffset = Math.PI / 6;
	
	//Start at top of hexagon
	drawingContext.beginPath();
	drawingContext.moveTo (
		this.xCenter + size * Math.sin(angleOffset),
		this.yCenter - size * Math.cos(angleOffset)
	);
	//Move clockwise
	var newAngle;
	for (var i = 1; i <= 6; i += 1) {
		newAngle = i * Math.PI / 3;
		drawingContext.lineTo (
			this.xCenter + size * Math.sin(newAngle + angleOffset),
			this.yCenter - size * Math.cos(newAngle + angleOffset)
		);
	}
	drawingContext.closePath();
	
	if (mapStyle == "retro") {
		
		var imgCanvas = resourceTypeToImageCanvas[this.resourceType];
		
		drawingContext.drawImage(
			imgCanvas,
			0, 0, imgCanvas.width, imgCanvas.height, 
			this.xCenter - size,
			this.yCenter - dy,
			2*size,
			2*dy
		);
		
	} else {
		drawingContext.fill();
	}
	
	drawingContext.stroke();
	
}

//Drawing number for the squares
HexTile.prototype.drawNumber = function() {
	
	drawingContext.fillStyle = "#FFFFFF";
	drawingContext.strokeStyle = "#000000";
	drawingContext.lineWidth = 4;
	drawingContext.beginPath();
    drawingContext.rect(this.xCenter -.35*size, this.yCenter -.35*size,.7*size,.7*size);
	drawingContext.closePath();
	drawingContext.fill();
	drawingContext.stroke();
	
	var fontSizePt = Math.ceil(30/40*(.45*size-8)+6);
	
	drawingContext.font = "bold " + fontSizePt + "pt times new roman";
	drawingContext.textAlign = "center";
	if ( this.isHighlyProductive() ) {
		drawingContext.fillStyle = "#FF0000";
	} else {
		drawingContext.fillStyle = "#000000";
	}
	drawingContext.fillText(
		this.number.toString(),
		this.xCenter,
		this.yCenter + Math.ceil( 0.85 * fontSizePt/2 )
	);
	
}

Array.prototype.random = function(removeElem) {
	var idx = Math.floor(Math.random() * this.length);
	var val = this[idx];
	if (removeElem) {
		this.splice(idx,1);
	}
	return val;
}

Array.prototype.copy = function() {
	return this.slice();
}

Array.prototype.indexOfArray = function(val) {
	var arr = [];
	var sIdx = 0;
	var tmpCopy = this.copy();
	do {
		var rIdx = tmpCopy.indexOf(val);
		var valid = (rIdx >= 0);
		if (valid) {
			tmpCopy.splice(0, rIdx + 1);
			arr.push(sIdx + rIdx);
			sIdx += rIdx + 1;
		}
	} while (valid);
	return arr;
}

Array.prototype.swap = function(idx1, idx2) {
	var tmp = this[idx1];
	this[idx1] = this[idx2];
	this[idx2] = tmp;
}

function addCanvas() {
	mapCanvas = document.createElement("canvas");
	drawingContext = mapCanvas.getContext('2d');
	mapCanvas.id = "map-canvas";
	sizeCanvas();
	document.getElementById("map-container").appendChild(mapCanvas);
	
}

function sizeCanvas() {
	var mapContainer = $("div#map-container")[0];
	$(mapCanvas).attr("width", $(mapContainer).width());
	$(mapCanvas).attr("height", $(mapContainer).height());
	canvasCenterY = mapCanvas.height/2;
	canvasCenterX = mapCanvas.width/2;
}


CanvasRenderingContext2D.prototype.clear = 
  CanvasRenderingContext2D.prototype.clear || function (preserveTransform) {
    if (preserveTransform) {
      this.save();
      this.setTransform(1, 0, 0, 1, 0, 0);
    }

    this.clearRect(0, 0, this.canvas.width, this.canvas.height);

    if (preserveTransform) {
      this.restore();
    }           
}; // http://stackoverflow.com/questions/2142535/how-to-clear-the-canvas-for-redrawing
